#!/bin/bash
set -e
set -x

# --- Configuration ---
# Ensure we are running from the 'fuzz' directory
if [ "$(basename "$(pwd)")" != "fuzz" ]; then
  echo "Error: This script must be run from the 'fuzz' directory."
  exit 1
fi

TOOLCHAIN="nightly"
# Features might be needed for the binaries to run correctly with corpus inputs
FEATURES="libfuzzer_fuzz"
# Output directories relative to 'fuzz' directory
SOURCE_PATH=".." # Project root relative to fuzz dir

# --- Dependencies ---
echo "Checking/installing dependencies..."
# cargo-llvm-cov implicitly uses/installs necessary LLVM tools
rustup +${TOOLCHAIN} component add llvm-tools-preview # Still needed for manual llvm-cov if used, keep for now
# Check if cargo-llvm-cov is installed, install if not
if ! cargo +${TOOLCHAIN} --list | grep -q "llvm-cov"; then
    echo "Installing cargo-llvm-cov..."
    cargo +${TOOLCHAIN} install cargo-llvm-cov
fi

# Clean previous builds and coverage artifacts
echo "Cleaning previous build and coverage artifacts..."
cargo +${TOOLCHAIN} clean
rm -rf target/llvm-cov-target # Clean specific llvm-cov target dir
rm -rf target/coverage # Clean old reports

# --- Run Targets and Collect Coverage Data ---
echo "Running fuzz targets with cargo-llvm-cov to collect coverage..."

# Set RUSTFLAGS required for fuzzing, matching ci-fuzz-libfuzzer.sh
# This enables #[cfg(fuzzing)] blocks to expose private items.
export RUSTFLAGS="--cfg=fuzzing --cfg=secp256k1_fuzz --cfg=hashes_fuzz"

# Determine host triple dynamically for the --target flag
HOST_TRIPLE=$(rustc +${TOOLCHAIN} --version --verbose | grep host | cut -d' ' -f2)
if [ -z "$HOST_TRIPLE" ]; then
    echo "Error: Could not determine host triple."
    exit 1
fi
echo "Detected host triple: $HOST_TRIPLE"

# Define combined features, explicitly adding std for relevant dependencies
# Ensure _test_utils is included for fuzzing infrastructure if needed
COMBINED_FEATURES="$FEATURES,lightning/_test_utils,lightning/std,lightning-invoice/std"

# Iterate over target binaries
for TARGET_PATH in src/bin/*_target.rs; do
    FILENAME=$(basename "$TARGET_PATH")
    TARGET_NAME="${FILENAME%.*}" # Remove .rs extension
    TARGET_CORPUS_DIR="corpus/$TARGET_NAME"

    if [ -d "$TARGET_CORPUS_DIR" ]; then
        echo "Running cargo llvm-cov for target: $TARGET_NAME with corpus $TARGET_CORPUS_DIR"
        # Run the target to generate coverage data, but don't generate a report yet (--no-report)
        # cargo-llvm-cov run will build, execute, and generate profdata in target/llvm-cov-target
        # Allow non-zero exit code as fuzzer might find issues, but coverage is still useful
        # Add -runs=1 after -- to limit the fuzzer execution to just the corpus inputs
        if ! cargo +${TOOLCHAIN} llvm-cov run --no-report --target "$HOST_TRIPLE" --features "$COMBINED_FEATURES" --bin "$TARGET_NAME" -- "$TARGET_CORPUS_DIR" -runs=1; then
             echo "Warning: Execution of $TARGET_NAME with cargo-llvm-cov finished with non-zero status."
        fi
    else
        echo "Warning: Corpus directory ($TARGET_CORPUS_DIR) not found for target $TARGET_NAME. Skipping."
        # Consider whether this should be an error (exit 1) depending on requirements
    fi
done

unset RUSTFLAGS

# Define paths
MERGED_PROFDATA_PATH="target/llvm-cov-target/fuzz.profdata" # Store merged data alongside raw data
HTML_REPORT_DIR="target/coverage/html"

# Create output directory for HTML report if it doesn't exist
# target/llvm-cov-target should already exist from the run step
mkdir -p "$HTML_REPORT_DIR"

# Find all .profraw files generated by the runs
PROFRAW_FILES=$(find target/llvm-cov-target -name "*.profraw")

if [ -z "$PROFRAW_FILES" ]; then
    echo "Error: No .profraw files found in target/llvm-cov-target. Cannot generate coverage report."
    exit 1
fi

# Merge .profraw files into a single .profdata file
echo "Merging profraw files..."
# Use rustup run to ensure the correct llvm-profdata corresponding to the toolchain is used
# if ! rustup run ${TOOLCHAIN} -- llvm-profdata merge -sparse $PROFRAW_FILES -o "$MERGED_PROFDATA_PATH"; then
if ! llvm-profdata merge $PROFRAW_FILES -o "$MERGED_PROFDATA_PATH"; then
    echo "Error: llvm-profdata merge failed."
    exit 1
fi
echo "Merged profile data created at $MERGED_PROFDATA_PATH"

# Identify the instrumented binary files
# Need to reconstruct the paths based on the targets run earlier
echo "Identifying instrumented binaries..."
declare -a OBJECT_FLAGS
BINARY_DIR="target/llvm-cov-target/$HOST_TRIPLE/debug" # Base directory for binaries

# Re-iterate over target sources to get names
for TARGET_PATH in src/bin/*_target.rs; do
    FILENAME=$(basename "$TARGET_PATH")
    TARGET_NAME="${FILENAME%.*}" # Remove .rs extension
    TARGET_CORPUS_DIR="corpus/$TARGET_NAME"
    BINARY_PATH="$BINARY_DIR/$TARGET_NAME"

    # Check if the corresponding corpus dir existed (meaning the target was likely run)
    # and if the binary file actually exists
    if [ -d "$TARGET_CORPUS_DIR" ] && [ -f "$BINARY_PATH" ]; then
        echo "Found binary for target $TARGET_NAME at $BINARY_PATH"
        OBJECT_FLAGS+=("-object" "$BINARY_PATH")
    else
        echo "Warning: Skipping binary for $TARGET_NAME (corpus dir existed: $([ -d "$TARGET_CORPUS_DIR" ] && echo true || echo false), binary exists: $([ -f "$BINARY_PATH" ] && echo true || echo false))"
    fi
done

if [ ${#OBJECT_FLAGS[@]} -eq 0 ]; then
    echo "Error: No instrumented binaries found in $BINARY_DIR. Cannot generate report."
    exit 1
fi

# Generate the HTML report using llvm-cov show
echo "Generating HTML report using llvm-cov show..."
IGNORE_REGEX="(/.cargo/|/fuzz/|/target/|/contrib/|/tests/|/benches/|lightning-invoice/src/convert\.rs|lightning-block-sync/src/lib\.rs|lightning-net-tokio/src/lib\.rs|lightning-persister/src/lib\.rs|lightning-rapid-gossip-sync/src/lib\.rs|lightning-transaction-sync/src/lib\.rs|lightning/src/util/ser\.rs)"

# Use rustup run to ensure the correct llvm-cov corresponding to the toolchain is used
if ! llvm-cov show \
    "${OBJECT_FLAGS[@]}" \
    -instr-profile="$MERGED_PROFDATA_PATH" \
    -format=html \
    -output-dir="$HTML_REPORT_DIR" \
    -ignore-filename-regex="$IGNORE_REGEX" \
    -show-line-counts-or-regions \
    -show-instantiations=false; then
    echo "Error: llvm-cov show command failed."
    exit 1
fi

# --- Done ---
echo "--------------------------------------------------"
echo "Combined coverage report generation finished."
echo "Report available at: fuzz/$HTML_REPORT_DIR/index.html"
echo "--------------------------------------------------" 